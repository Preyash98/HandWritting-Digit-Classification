# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13rmvHH8nUBGODEVC3NLvuyJToxAgC_aA
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
mndata = mnist.load_data('mnist')
(X_train, y_train), (X_test, y_test) = mnist.load_data('mnist')

import matplotlib.pyplot as plt
import numpy as np

id = 0

image = np.array(X_train[id], dtype='float')
pixels = image.reshape((28, 28))
plt.imshow(pixels, cmap='gray')
plt.show()

print(X_train[id])
print(y_train[id])

print(X_train.shape)
print(X_test.shape)

X_train_re = X_train.reshape(X_train.shape[0], 28*28)
X_test_re = X_test.reshape(X_test.shape[0], 28*28)
print(X_train_re)
print(X_test_re)

print(y_train.shape)
print(y_train)

y_train_re = tf.keras.utils.to_categorical(y_train,10)
y_test_re = tf.keras.utils.to_categorical(y_test,10)

print(y_train_re)

model1 = Sequential()
model1.add(Dense(4000,'relu',input_shape=(784,)))

model1.add(Dense(10,'softmax'))
model1.summary()
model1.compile(optimizer='sgd',loss='categorical_crossentropy', metrics=['accuracy'])
history=model1.fit(X_train_re,y_train_re,batch_size=128,epochs=20,verbose=0)
loss,accuracy=model1.evaluate(X_test_re,y_test_re,verbose=0)


print("Accuracy is:",accuracy*100,"%")

model5 = Sequential()
model5.add(Dense(1024,'relu',input_shape=(784,)))
model5.add(Dense(1024,'relu',input_shape=(784,)))
model5.add(Dense(1024,'relu',input_shape=(784,)))

model5.add(Dense(10,'softmax'))
model5.summary()
model5.compile(optimizer='RMSprop',loss='categorical_crossentropy', metrics=['accuracy'])
history=model5.fit(X_train_re,y_train_re,batch_size=128,epochs=50,verbose=0)
loss,accuracy=model5.evaluate(X_test_re,y_test_re,verbose=0)


print("Accuracy is:",accuracy*100,"%")

model6 = Sequential()
model6.add(Dense(5000,'relu',input_shape=(784,)))

model6.add(Dense(10,'softmax'))
model6.summary()
model6.compile(optimizer='RMSprop',loss='categorical_crossentropy', metrics=['accuracy'])
history=model6.fit(X_train_re,y_train_re,batch_size=128,epochs=30,verbose=0)
loss,accuracy=model6.evaluate(X_test_re,y_test_re,verbose=0)

print("Accuracy is:",accuracy*100,"%")

